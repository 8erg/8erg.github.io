<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Cybesecurity Research Blog </title>
        <link>//localhost:1313/posts/</link>
        <description>Recent content in Posts on Cybesecurity Research Blog </description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 04 Nov 2024 00:00:00 +0000</lastBuildDate>
        <atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Agent Tesla - Reverse Engineering Spyware</title>
            <link>//localhost:1313/posts/2024-11-04-reverse-engineering-agent-tesla-spyware/</link>
            <pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate>
            
            <guid>//localhost:1313/posts/2024-11-04-reverse-engineering-agent-tesla-spyware/</guid>
            <description>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;hr&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Section&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Preface&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;An introduction to the context and purpose of the analysis, including tools and objectives.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Basic Static &amp;amp; Dynamic Analysis&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Initial inspection of the binary, such as examining file metadata, strings, and imports to gather a high-level understanding.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Advanced Static Analysis&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;In-depth dissection of the binary, including reverse engineering with disassemblers, examining code flow, and detecting obfuscation techniques.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;A summary of findings, including identified indicators of compromise (IOCs), behaviors, and next steps for further analysis.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Agent Tesla a Spyware acting as a game and stealing credentials. This sample is packed and has to be unpacked first in order to see the content. Uts&amp;rsquo;s malware developped in C#&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<hr>
<table>
  <thead>
      <tr>
          <th><strong>Section</strong></th>
          <th><strong>Description</strong></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Preface</strong></td>
          <td>An introduction to the context and purpose of the analysis, including tools and objectives.</td>
      </tr>
      <tr>
          <td><strong>Basic Static &amp; Dynamic Analysis</strong></td>
          <td>Initial inspection of the binary, such as examining file metadata, strings, and imports to gather a high-level understanding.</td>
      </tr>
      <tr>
          <td><strong>Advanced Static Analysis</strong></td>
          <td>In-depth dissection of the binary, including reverse engineering with disassemblers, examining code flow, and detecting obfuscation techniques.</td>
      </tr>
      <tr>
          <td><strong>Conclusion</strong></td>
          <td>A summary of findings, including identified indicators of compromise (IOCs), behaviors, and next steps for further analysis.</td>
      </tr>
  </tbody>
</table>
<h3 id="preface">Preface</h3>
<hr>
<p>Agent Tesla a Spyware acting as a game and stealing credentials. This sample is packed and has to be unpacked first in order to see the content. Uts&rsquo;s malware developped in C#</p>
<h3 id="analysis">Analysis</h3>
<hr>
<p>In this section I used a simple tool named <code>pe studio</code> to get a general understanding of the loader.</p>

    <img src="/images/Pasted%20image%2020241215001442.png"  alt="20240813093757"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020241215002133.png"  alt="20240813093757"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>We can see that that this sample has probably been written in <code>C#</code> and we can see that it&rsquo;s trying to make us believe that it&rsquo;s a game by the description <code>Diablo 3</code>, I don&rsquo;t play video games but i heard about that particular video game</li>
<li>There&rsquo;s high entropy being detected, so it&rsquo;s probably packed</li>
</ul>
<p><em>To Unpack it I used <code>x32dbg</code> and I put a breakpoint on <code>WriteProcessMemory</code></em></p>
<ul>
<li>So <code>agent tesla</code> will decrypt the encrypted payload into the memory then it will create the agent process and then dump the unpacked data in the child process</li>
</ul>

    <img src="/images/Pasted%20image%2020241215230050.png"  alt="20241215230050"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020241215230930.png"  alt="20241215230930"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<blockquote>
<p>[!info] When a malware create a child process, go to <code>WriteProcessMemory</code> to quickly get the unpacked executable</p>
</blockquote>
<ul>
<li>As you can see in the debugger, by hitting the breakpoint on <code>WriteProcessMemory</code> we can find the unpacked executable by following the third argument address in the dump. Some of you will probably ask me why, go to the third argument, well simply because on the documentation we can see that third argument of <code>WriteProcessMemory</code> contains the <code>lpBuffer</code> which is a pointer to the buffer, which in our case represent the unpacked executable that is written in the sub-process that has been created by <code>agent tesla</code>.</li>
</ul>

    <img src="/images/Pasted%20image%2020241215232905.png"  alt="20241215232905"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Based on these strings we can definitely conclude that we&rsquo;re dealing with an Info Stealer</li>
</ul>

    <img src="/images/Pasted%20image%2020241215234858.png"  alt="20241215234858"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>I&rsquo;ve put the unpacked executable inside the tool <code>Simple Assembly Explorer</code> in order to cleaned up most of the obfuscated strings, to ease up my analysis of the program code</li>
</ul>
<p>
    <img src="/images/Pasted%20image%2020241216001630.png"  alt="20241216001630"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020241216001831.png"  alt="20241216001831"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />

</p>
<ul>
<li>By Monitoring the <code>RegSvcs.exe</code> process we can see that there&rsquo;s a lot of operations being performed on my google chrome credentials</li>
<li>We can see it goes on Edge too</li>
</ul>

    <img src="/images/Pasted%20image%2020241216213452.png"  alt="20241216213452"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<h3 id="rules--signatures">Rules &amp; Signatures</h3>
<hr>
<pre tabindex="0"><code>rule Agent_Tesla { 
    meta: 
        last_updated = &#34;2024-09-04&#34;
        author = &#34;8erg&#34;
        description = &#34;Yara detection rule for Spyware Agent Tesla&#34;

    strings:
        $exe_name = &#34;PHjZfdZvEt.exe&#34; 

    condition:
        $exe_name
}
</code></pre><h3 id="conclusion">Conclusion</h3>
<hr>
<p>I really enjoyed this one, it was my first time analyzing a spyware.
I was able to understand a recurrent feature with some malware that creates a child process.
Might do some more spyware, maybe some on android to see the differences.
Well, until next time!</p>
]]></content>
        </item>
        
        <item>
            <title>Analyzing EarlyBird Injection Malware</title>
            <link>//localhost:1313/posts/2024-10-08-analyzing-earlybird-injection-malware/</link>
            <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
            
            <guid>//localhost:1313/posts/2024-10-08-analyzing-earlybird-injection-malware/</guid>
            <description>&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️ | Warning the following part contains a heavy dose of ChatGPT usage&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Imagine a cunning intruder, slipping through a barely-opened door before anyone even notices. This is how EarlyBird injection malware operates, sneaking into the system during a tiny, often overlooked moment—the startup of a process. Before security defenses fully spring to life, EarlyBird injects its malicious code, embedding itself in the memory space of legitimate processes.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h3 id="preface">Preface</h3>
<hr>
<!-- raw HTML omitted -->
<blockquote>
<p>⚠️ | Warning the following part contains a heavy dose of ChatGPT usage</p>
</blockquote>
<p>Imagine a cunning intruder, slipping through a barely-opened door before anyone even notices. This is how EarlyBird injection malware operates, sneaking into the system during a tiny, often overlooked moment—the startup of a process. Before security defenses fully spring to life, EarlyBird injects its malicious code, embedding itself in the memory space of legitimate processes.</p>
<p>Like a master of disguise, it uses Windows API functions to avoid detection, masking its true intent behind the facade of normal operations. Once nestled inside, the malware blends in with regular activity, leaving little trace of its presence. Security tools, only alert after the fact, find themselves outmaneuvered by this early intruder. EarlyBird’s subtlety lies not in brute force, but in timing—exploiting the system&rsquo;s brief moment of vulnerability before defenses are ready.</p>
<p>In this blog, we&rsquo;ll unravel the intricate dance of this stealthy technique and explore how it has become a favored tool in the arsenal of advanced malware and APT groups. Let’s dive into the analysis of EarlyBird injection and see how it evades detection while leaving no stone unturned in its path of exploitation.</p>
<!-- raw HTML omitted -->
<h3 id="basic-static--dynamic-analysis">Basic Static &amp; Dynamic Analysis</h3>
<hr>
<!-- raw HTML omitted -->
<p>In this section I used a simple tool named <code>pe studio</code> and <code>floss</code> to get a general understanding of this sample.</p>

    <img src="/images/Pasted%20image%2020240813093757.png"  alt="20240813093757"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>We can see that this malware must be written in <code>C#</code></li>
</ul>

    <img src="/images/Pasted%20image%2020240813094133.png"  alt="20240813094133"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Passing the hash in Virus Total gives us a hit, so now we can definitely be sure that this sample is malicious</li>
</ul>

    <img src="/images/Pasted%20image%2020240813094914.png"  alt="20240813094914"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240813095115.png"  alt="20240813095115"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>By going through the strings report generated by <code>floss</code> we can see that there some Windows API functions that will be loaded, this already seem fishy, but let&rsquo;s continue to see what else we can find</li>
</ul>

    <img src="/images/Pasted%20image%2020240813095342.png"  alt="20240813095342"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240813095422.png"  alt="20240813095422"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>We can also find an executable name in the strings output that match with what was returned by Virus Total</li>
</ul>
<!-- raw HTML omitted -->
<h3 id="advanced-static--dynamic-analysis">Advanced Static &amp; Dynamic Analysis</h3>
<hr>
<!-- raw HTML omitted -->
<blockquote>
<p>ℹ️ For this part I used <code>dnSpy</code> instead of <code>Ghidra</code> since it&rsquo;s a <code>C#</code> application</p>
</blockquote>

    <img src="/images/Pasted%20image%2020240813104622.png"  alt="20240813104622"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240813104507.png"  alt="20240813104507"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>In the main program function we can see that a resource his being loaded, so I will save the <code>png</code> file and try to open it to see what will happen.</li>
</ul>

    <img src="/images/Pasted%20image%2020240813185038.png"  alt="20240813185038"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240813185117.png"  alt="20240813185117"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Another resource is being loaded in the program</li>
</ul>

    <img src="/images/Pasted%20image%2020240813185156.png"  alt="20240813185156"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>There&rsquo;s some <code>xor</code> being done with the image and the resource that was loaded earlier, we can guess that this operation is performed to decrypt the payload contained in the image</li>
</ul>

    <img src="/images/Pasted%20image%2020240813185516.png"  alt="20240813185516"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<blockquote>
<p>ℹ️ We&rsquo;re going to run the debugger to see what is being loaded at the line 44</p>
</blockquote>

    <img src="/images/Pasted%20image%2020240819102648.png"  alt="20240819102648"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>After running the debugger, we can see that the variable contains an executable based on the first hex values which are <code>4D</code> and <code>5A</code></li>
</ul>

    <img src="/images/Pasted%20image%2020240819103842.png"  alt="20240819103842"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>After dumping the executable in a separate file and opening it in <code>dnSpy</code> we can see the actually functionality of the malware</li>
<li>we can also see that there&rsquo;s some anti sandbox detection, which is leading me to think that this program might just be the second stage which will lay the ground the work before running the shellcode</li>
</ul>

    <img src="/images/Pasted%20image%2020240819104347.png"  alt="20240819104347"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>There&rsquo;s also a resource called <code>Main</code>, we will dump it and analyze it later</li>
</ul>

    <img src="/images/Pasted%20image%2020240819105709.png"  alt="20240819105709"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>We can see that some registries are being created/modified</li>
</ul>

    <img src="/images/Pasted%20image%2020240819110043.png"  alt="20240819110043"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>The sample is also trying to disable <code>uac</code></li>
</ul>

    <img src="/images/Pasted%20image%2020240819110622.png"  alt="20240819110622"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240819110904.png"  alt="20240819110904"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240819112317.png"  alt="20240819112317"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Here we can see that the resource that was named <code>Main</code>, that we found earlier, is being decompressed and will be run</li>
</ul>
<blockquote>
<p>ℹ️ We will now switch to <code>ghidra</code>, because the executable <code>main</code> does not seem to be written in <code>C#</code></p>
</blockquote>

    <img src="/images/Pasted%20image%2020240929211433.png"  alt="20240929211433"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>This is the output of the executable open in ghidra, now we&rsquo;ll try to find where exactly the apc injection happens.</li>
<li>In the screenshot up ahead you should notice that named a function as <code>Very_Interesting_Underneath</code> and that is not because I did not know what to put, but before that let&rsquo;s go through some stuff before</li>
</ul>

    <img src="/images/Pasted%20image%2020240929213725.png"  alt="20240929213725"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240929213837.png"  alt="20240929213837"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Notice how it gets called as a routine</li>
</ul>

    <img src="/images/Pasted%20image%2020241004213724.png"  alt="20241004213724"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>By going through the code I notice a function that perform the apc injection that we&rsquo;ve been looking for, let&rsquo;s dive in to find out what it does</li>
</ul>

    <img src="/images/Pasted%20image%2020241004215118.png"  alt="20241004215118"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Here there&rsquo;s a process being created, let&rsquo;s see how it&rsquo;s being created</li>
</ul>

    <img src="/images/Pasted%20image%2020241004215248.png"  alt="20241004215248"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Here we can see the <code>CreateProcessA</code> and if you pay attention you can spot a 4 for the 6 argument which represent the <code>Creation Flags</code> , so this process will be created in a <code>SUSPENDED STATE</code></li>
<li>For an <code>apc injection</code> to occur the process in question has to be in a suspended state</li>
</ul>

    <img src="/images/Pasted%20image%2020241004215118.png"  alt="20241004215118"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>the process info of the suspended process are then being used as an argument in the <code>NtQueueApcThread</code> and then being resumed as a normal execution flow and because the APC has been queued, the queued procedure will execute at some point when the thread enters an alertable state</li>
</ul>
<!-- raw HTML omitted -->
<h3 id="rules--signatures">Rules &amp; Signatures</h3>
<hr>
<!-- raw HTML omitted -->
<pre tabindex="0"><code>rule EarlyBird_Detection {

    meta:
        last_updated = &#34;2024-09-22&#34;
        author = &#34;8erg&#34;
        description = &#34;Yara detection rule for An EarlyBird Injection&#34;

    strings:
        $exe_name = &#34;phpv1ph20_cr.exe&#34;

    condition:
        $exe_name
}
</code></pre><!-- raw HTML omitted -->
<h3 id="conclusion">Conclusion</h3>
<hr>
<!-- raw HTML omitted -->
<p>Well, this is it for this analysis. I really enjoyed this one! I&rsquo;m really starting to get the hang of it.
To be honest this was the most difficult analysis, I had to do, simply because of it&rsquo;s many layers. It took me a long time to peel off all the layers to finally find the <code>apc injection</code>.
But, overall it was a great experience and I got to improve myself a little bit</p>
]]></content>
        </item>
        
        <item>
            <title>IcedID - Analyzing Second Stage Loader</title>
            <link>//localhost:1313/posts/2024-07-22-reversing-second-stage-loader/</link>
            <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>//localhost:1313/posts/2024-07-22-reversing-second-stage-loader/</guid>
            <description>&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;In the ever-evolving landscape of cyber threats, the IcedID loader stands out as a formidable banking Trojan with sophisticated capabilities. Originally known for its role as a banking malware, IcedID has grown to serve as a versatile loader for deploying additional malicious payloads. This analysis delves into the intricate mechanisms of IcedID, from its initial delivery through phishing or exploit kits, to its operational intricacies and data exfiltration methods.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h3 id="preface">Preface</h3>
<hr>
<!-- raw HTML omitted -->
<p>In the ever-evolving landscape of cyber threats, the IcedID loader stands out as a formidable banking Trojan with sophisticated capabilities. Originally known for its role as a banking malware, IcedID has grown to serve as a versatile loader for deploying additional malicious payloads. This analysis delves into the intricate mechanisms of IcedID, from its initial delivery through phishing or exploit kits, to its operational intricacies and data exfiltration methods.</p>
<p>Key areas of focus include the loader’s evasion techniques, persistence strategies, and communication with command-and-control servers. By dissecting IcedID&rsquo;s functionality and evolution, this analysis aims to shed light on its impact on targeted systems and provide insights into effective detection and mitigation strategies.</p>
<!-- raw HTML omitted -->
<h3 id="basic-static-analysis">Basic Static Analysis</h3>
<hr>
<!-- raw HTML omitted -->
<p>In this section I used a simple tool named <code>pe studio</code> to get a general understanding of the loader. After unpacking I also used a command line tool named <code>floss</code></p>

    <img src="/images/Pasted%20image%2020240716223035.png"  alt="20240716223035"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>In this screenshot we can clearly see that <code>pe studio</code> is not able to properly counts the imports and the libraries which indicates to me that this sample might be packed</li>
<li>also we can note that there is a high entropy. I will have to unpack it to be able to proceed my analysis</li>
</ul>

    <img src="/images/Pasted%20image%2020240716223435.png"  alt="20240716223435"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>We can also see that the raw size is lower than the virtual size which might be another indicator that this sample is packed</li>
</ul>
<blockquote>
<p>⚠️ | Before proceeding further in our basic static analysis we will perform the unpacking steps with x32bdg, since we are focusing on the analysis, I will not put the process in this blog</p>
</blockquote>
<ul>
<li>Interesting strings, Before unpacking

    <img src="/images/Pasted%20image%2020240721140409.png"  alt="20240721140409"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />

</li>
<li>After unpacking, I can see some interesting parts of some URLs
<ul>
<li><code>/photo.png?id=%0.2X%0.8X%0.8X%s</code></li>
<li><code>boldidiotruss.xyz</code></li>
<li><code>nizaoplov.xyz</code></li>
<li><code>153ishak.best</code></li>
<li><code>ilu21plane.xyz</code></li>
</ul>
</li>
<li>I can also see some interesting libraries being imported which indicates to me that something is being downloaded
<ul>
<li><code>WinHttpQueryDataAvailable</code></li>
<li><code>WinHttpConnect</code></li>
<li><code>WinHttpSendRequest</code></li>
<li><code>WinHttpCloseHandle</code></li>
<li><code>WinHttpSetOption</code></li>
<li><code>WinHttpOpenRequest</code></li>
<li><code>WinHttpReadData</code></li>
<li><code>WinHttpQueryHeaders</code></li>
<li><code>WinHttpOpen</code></li>
<li><code>WinHttpReceiveResponse</code></li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
<h3 id="basic-dynamic-analysis">Basic Dynamic Analysis</h3>
<hr>
<!-- raw HTML omitted -->

    <img src="/images/Pasted%20image%2020240717061554.png"  alt="20240717061554"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>By detonating the malware we notice that it tried to create a file named <code>photo.png</code></li>
</ul>

    <img src="/images/Pasted%20image%2020240717062937.png"  alt="20240717062937"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>We can also see that a <code>TLSv1.2</code> connection is made to <code>boldidiotruss.xyz</code></li>
</ul>
<!-- raw HTML omitted -->
<h3 id="advanced-static-analysis">Advanced Static Analysis</h3>
<hr>
<!-- raw HTML omitted -->

    <img src="/images/Pasted%20image%2020240717081349.png"  alt="20240717081349"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>
<p>Here we can see that loader is calling the function <code>SHGetFolderPathA</code> and by looking at the documentation I can see that the second argument indicates the folder of interest in this case it is aiming for <code>CSIDL_COMMON_DESKTOPDIRECTORY</code>, which represents a common folder that appear on the desktop for all users and the typical path is <code>C:\Users\Public\Desktop</code></p>
</li>
<li>
<p>We can also see that based upon the result the content of <code>pcVar5</code> will be different and at the end it will be concatenate to the folder path</p>
</li>
</ul>

    <img src="/images/Pasted%20image%2020240717081349.png"  alt="20240717081349"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>After that, we see that the <code>GetUsernameA</code> is used to fetch the current user, we also see that there is an attempt to create the directory</li>
<li>At the end, we can see that the string <code>\\photo.png</code> is appended to the current <code>folder_path</code> string</li>
</ul>

    <img src="/images/Pasted%20image%2020240717085042.png"  alt="20240717085042"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>We can see the file path that was constructed earlier is used to create a file</li>
</ul>

    <img src="/images/Pasted%20image%2020240717085910.png"  alt="20240717085910"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>There&rsquo;s some VM detection being performed by checking information about the CPU running the sample</li>
</ul>
<blockquote>
<p>⚠️ | Note that some functions have been renamed by me to facilitate the clarity of my analysis</p>
</blockquote>

    <img src="/images/Pasted%20image%2020240717090929.png"  alt="20240717090929"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>After the VM detection, there&rsquo;s string formatting operation that is performed to construct the URL path to the <code>.png</code> file and also to the URL hostname</li>
<li>we can see that the result of the concatenation of the full URL is being sent to a function that will handle the communication with the possible the command &amp; control center</li>
</ul>

    <img src="/images/Pasted%20image%2020240717092802.png"  alt="20240717092802"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240717092848.png"  alt="20240717092848"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>In these screenshots, we can clearly see the code the of the communication  with the C2</li>
<li>Based on my analysis I deduct that a call his being made to verify that the command and control is active and running correctly, because of the parameters of the functions I can see that no data is actually being sent since it&rsquo;s only performing a get request</li>
</ul>

    <img src="/images/Pasted%20image%2020240721122821.png"  alt="20240721122821"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Now, I thought to myself why would they be communicating via an URL that looks like you&rsquo;re fetching an image? Because, in reality you&rsquo;re really just communicating, sending and receiving information stealthily. Think about it, if you look in Wireshark and see some request made to this URL you would only think that a picture his being fetched, but in reality, you&rsquo;re data is probably being exfiltrated. I might be wrong in my analysis but that is what I get from it</li>
</ul>

    <img src="/images/Pasted%20image%2020240721123829.png"  alt="20240721123829"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>By looking at everything from a higher perspective, here&rsquo;s what can I make of the general process of this Loader
<ol>
<li>We create the path where we will store the malicious file</li>
<li>we decrypt probably the shellcode that will be stored in that file temporary</li>
<li>we create the file picture</li>
<li>we decrypt something</li>
<li>we check if the command &amp; control center is active</li>
<li>we write in the data that decrypted in that file</li>
<li>we setting up the shellcode in memory and then we execute it</li>
</ol>
</li>
</ul>
<blockquote>
<p>ℹ️ In my basic dynamic analysis we don&rsquo;t see the call made to the url in question, that may be because the malware is able to detect that I&rsquo;m using a vm, so it does not pursue the communication, we will confirm it later when we will be doing the Advanced Dynamic Analysis with our favorite debugger x32dbg.</p>
</blockquote>
<!-- raw HTML omitted -->
<h3 id="advanced-dynamic-analysis">Advanced Dynamic Analysis</h3>
<hr>
<!-- raw HTML omitted -->

    <img src="/images/Pasted%20image%2020240721131650.png"  alt="20240721131650"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Here we can see the file path of the <code>photo.png</code>, by the way don&rsquo;t mind the username, I got this box from the <code>PMAT</code> certification</li>
</ul>

    <img src="/images/Pasted%20image%2020240721131953.png"  alt="20240721131953"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>We can also see the URL being formed, you can see that there is type of string that is appended to it. It&rsquo;s probably some data about the host being sent to the <code>Command &amp; Control</code> Server , You can see some more details about the the construction of this string in the picture below</li>
</ul>

    <img src="/images/Pasted%20image%2020240723093759.png"  alt="20240723093759"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240723093829.png"  alt="20240723093829"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240722105526.png"  alt="20240722105526"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Here we can see the value 8 and 248 making a total of 256, so we can assume that this is the encryption function where the 8 represent  <code>key</code> and the 248 the <code>data</code></li>
</ul>

    <img src="/images/Pasted%20image%2020240722110943.png"  alt="20240722110943"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>This screenshot show us clearly that a <code>GET</code> request is being made</li>
</ul>

    <img src="/images/Pasted%20image%2020240722111231.png"  alt="20240722111231"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<!-- raw HTML omitted -->
<h3 id="rules--signatures">Rules &amp; Signatures</h3>
<hr>
<!-- raw HTML omitted -->
<pre tabindex="0"><code>rule IcedId_Ldr_Detection {
    
    meta: 
        last_updated = &#34;2024-07-21&#34;
        author = &#34;8erg&#34;
        description = &#34;Yara detection rule for IcedId Loader&#34;

    strings:
        $magical_path = &#34;c:\\Sizeanger\\CreatePick\\mixpractice\\Sciencescience\\KeyContain\\farterm\\Tiresubtract\\CenterSkinMass.pdb&#34;

    condition:
        $magical_path
}
</code></pre><!-- raw HTML omitted -->
<h3 id="conclusion">Conclusion</h3>
<hr>
<!-- raw HTML omitted -->
<p>Well, this is it for this analysis. I really enjoyed this one! I&rsquo;m really starting to get the hang of it.
It&rsquo;s interesting to see how some people develop their malware, you can see that there&rsquo;s a lot of thought that are put into it.
I&rsquo;m really learning a lot. Well, I&rsquo;ll stop babbling now. See you on the next one!</p>
<!-- raw HTML omitted -->
]]></content>
        </item>
        
        <item>
            <title>WannaCry - Analyzing Initial Stage</title>
            <link>//localhost:1313/posts/2024-07-16-reverse-engineering-wannacry-initial-stage/</link>
            <pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>//localhost:1313/posts/2024-07-16-reverse-engineering-wannacry-initial-stage/</guid>
            <description>&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;In the early summer of 2017, WannaCry was unleashed on the world. Widely considered to be one of the most devastating malware infections to date, WannaCry left a trail of destruction in its wake.
WannaCry is a classic ransomware sample; more specifically, it is a ransomware crypto worm, which means that it can encrypt individual hosts and had the capability to propagate through a network on its own.
Here’s my own analysis of this particular specimen.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h3 id="preface">Preface</h3>
<hr>
<!-- raw HTML omitted -->
<p>In the early summer of 2017, WannaCry was unleashed on the world. Widely considered to be one of the most devastating malware infections to date, WannaCry left a trail of destruction in its wake.
WannaCry is a classic ransomware sample; more specifically, it is a ransomware crypto worm, which means that it can encrypt individual hosts and had the capability to propagate through a network on its own.
Here’s my own analysis of this particular specimen.</p>
<p>In this blog post, I will analyze the initial stage of WannaCry ransomware sample. Please note that I&rsquo;m new at this and I will try to provide a detail technical analysis of the initial stage to the best of my abilities.
Hope you will enjoy this!!</p>
<!-- raw HTML omitted -->
<h3 id="basic-static-analysis">Basic Static Analysis</h3>
<hr>
<!-- raw HTML omitted -->

    <img src="/MyBlog2/images/Pasted%20image%2020240709173746.png"  alt="20240709173746"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<blockquote>
<p>ℹ️ | For this part I used a command line tool named floss to get the strings from the ransomware executable.</p>
</blockquote>
<ul>
<li>
<p>By looking as some of the strings, we can see some interesting library related to encryptions such as:</p>
<ul>
<li><code>CryptAcquireContextA</code></li>
<li><code>CryptGenRandom</code></li>
<li><code>CryptServiceA</code></li>
<li><code>CryptReleaseContext</code></li>
<li><code>CryptGenKey</code></li>
<li><code>CryptDecrypt</code></li>
<li><code>CryptEncrypt</code></li>
<li><code>CryptDestroyKey</code></li>
<li><code>CryptImportKey</code></li>
</ul>
</li>
<li>
<p>We can also see that the malware will probably modify or add some registry based on the library imported</p>
</li>
<li>
<p>In the strings, we can also find words such as :</p>
<ul>
<li><code>mssecsvc.exe</code> (already flagged for been used for ransomware infection)</li>
<li><code>tasksche.exe</code></li>
</ul>
</li>
<li>
<p>We also see alot of base64 encoded strings</p>
</li>
<li>
<p>We can see some randomly named folder that will dynamically named on runtime</p>
<ul>
<li><code>C:\%s\%s</code></li>
<li><code>C:\%s\qeriuwjhrf</code></li>
</ul>
</li>
<li>
<p>We can also some interesting urls, such as :</p>
<ul>
<li><code>http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com</code></li>
</ul>
</li>
<li>
<p>An interesting string that let&rsquo;s us know for sure that we&rsquo;re dealing with the WannaCry malware :</p>
<ul>
<li><code>c.wnry</code></li>
<li><code>t.wnry</code></li>
<li><code>msg/m_croatian.wnry</code></li>
<li><code>msg/m_dutch.wnry9</code></li>
<li><code>msg/m_english.wnryF</code></li>
<li><code>msg/m_korean.wnry</code></li>
<li><code>msg/m_latvian.wnry</code></li>
</ul>
</li>
<li>
<p>Interesting strings:</p>
<ul>
<li><code>115p7UMMngoj1pMvkpHijcRdfJNXj6LrLn</code></li>
<li><code>12t9YDPgwueZ9NyMgw519p7AA8isjr6SMw</code></li>
<li><code>13AM4VW2dhxYgXeQepoHkHSQuy6NgaEb94</code></li>
</ul>
</li>
<li>
<p>Suspicious commands:</p>
<ul>
<li><code>icacls . /grant Everyone:F /T /C /Q</code> (Granting everyon acces to ACL)</li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
<h3 id="basic-dynamic-analysis">Basic Dynamic Analysis</h3>
<hr>
<!-- raw HTML omitted -->
<ul>
<li>When triggering the malware with internet nothing happens, as far as encrypting my files, but I see that some calls are made to a malicious url, probably to drop something else on my file system</li>
<li>When triggering the malware without internet connection, i can see that my file system get automatically encrypted</li>
<li>There&rsquo;s seems to be a lot of call to different DNS</li>
</ul>
<p><em>Triggering the malware with fake internet simulation</em></p>

    <img src="/images/Pasted%20image%2020240709182444.png"  alt="20240709182444"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240709182542.png"  alt="20240709182542"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240709182931.png"  alt="20240709182931"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>It seems that the malware is making an http request to a malicious url</li>
</ul>
<p><em>Triggering the malware without internet simulation</em></p>

    <img src="/images/Pasted%20image%2020240709210004.png"  alt="20240709210004"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>A window pops up, that asks for payment and all my files are now encrypted</li>
<li>There&rsquo;s new executable for decryption being created on my desktop
<ul>
<li><code>@WanaDecryptor@.exe</code></li>
</ul>
</li>
</ul>

    <img src="/images/Pasted%20image%2020240712150050.png"  alt="20240712150050"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>a new executable is created named : <code>tasksche.exe</code></li>
</ul>

    <img src="/images/Pasted%20image%2020240712150435.png"  alt="20240712150435"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>we can also see that a folder is created by this newly executed process</li>
</ul>

    <img src="/images/Pasted%20image%2020240714222810.png"  alt="20240714222810"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />



    <img src="/images/Pasted%20image%2020240714223416.png"  alt="20240714223416"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>We also see that 2 new services have been created
<ul>
<li><code>mssecsvc2.0</code></li>
<li><code>dveqybpwqzws072</code></li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
<h3 id="advanced-static-analysis">Advanced Static Analysis</h3>
<hr>
<!-- raw HTML omitted -->
<blockquote>
<p>ℹ️ | In this section, I will be using cutter and ghidra for the advanced static analysis</p>
</blockquote>

    <img src="/images/Pasted%20image%2020240712212059.png"  alt="20240712212059"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Here we can see that based on the response from the malicious domain, we will enter the real program
<ul>
<li>Option 1 : We received a response from the domain and the program execute normally</li>
<li>Option 2: We receive no response and the WannaCry program gets executed</li>
</ul>
</li>
</ul>

    <img src="/images/Pasted%20image%2020240712212327.png"  alt="20240712212327"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>based on the numbers arguments received we will enter in this function</li>
</ul>

    <img src="/images/Pasted%20image%2020240712213151.png"  alt="20240712213151"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Here there&rsquo;s two function available, we will enter in the first one</li>
</ul>

    <img src="/images/Pasted%20image%2020240709220438.png"  alt="20240709220438"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Here we can see that the malware is creating and starting a new service called : <code>mssecsvc2.0</code></li>
</ul>
<blockquote>
<p>⚠️ | The second function will be analyzed via ghidra, since it was difficult to debug it in cutter</p>
</blockquote>

    <img src="/images/Pasted%20image%2020240714204704.png"  alt="20240714204704"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Here we can see that 4 function are loaded from <code>kernek32.dll</code>, will probably be used to create a malicious process that will run on the host machine</li>
</ul>

    <img src="/images/Pasted%20image%2020240714204902.png"  alt="20240714204902"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Here we can see that a resource is loaded, let&rsquo;s wait and see what it will be used for</li>
</ul>

    <img src="/images/Pasted%20image%2020240714205402.png"  alt="20240714205402"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>In the first 2 lines containing the <code>sprintf</code> statement we&rsquo;re formatting some strings</li>
<li>The line containing the <code>MoveFileExA</code>, to rename a file</li>
</ul>

    <img src="/images/Pasted%20image%2020240714170027.png"  alt="20240714170027"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>By comparing the same lines in cutter, we can clearly see that the malware is renaming the temporary file <code>qeriuwjhrf</code> to <code>tasksche.exe</code></li>
<li>Then we&rsquo;re creating the file named <code>tasksche.exe</code></li>
<li>Finally we can see that the program is writing the resource that was loaded earlier in the newly create file named <code>tasksche.exe</code></li>
</ul>
<!-- raw HTML omitted -->
<h3 id="advanced-dynamic-analysis">Advanced Dynamic Analysis</h3>
<hr>
<!-- raw HTML omitted -->
<blockquote>
<p>ℹ️ | Since I covered most of the initial program of the WannaCry program, in this section I just wanted to see how the newly created executable would be run. I used the famous debugger x32dbg</p>
</blockquote>

    <img src="/images/Pasted%20image%2020240714215122.png"  alt="20240714215122"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<ul>
<li>Here we can see that the file <code>tasksche.exe</code> will be executed with the <code>/i</code>. This is the program that starts the encryption process.</li>
</ul>
<!-- raw HTML omitted -->
<h3 id="rules--signatures">Rules &amp; Signatures</h3>
<hr>
<!-- raw HTML omitted -->
<pre tabindex="0"><code>rule WannaCry_Detection {
    
    meta: 
        last_updated = &#34;2024-07-16&#34;
        author = &#34;8erg&#34;
        description = &#34;Yare detection rule for WannaCry Ransom&#34;

    strings:
        $string1 = &#34;mssecsvc.exe&#34;
        $string2 = &#34;tasksche.exe&#34;
        $PE_magic_byte = &#34;MZ&#34;
        $malicious_url = &#34;http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com&#34;

    condition:
        $PE_magic_byte at 0 and
        ($string1 and $string2) or
        $malicious_url
}
</code></pre>
    <img src="/images/Pasted%20image%2020240716122337.png"  alt="20240716122337"  class="center"  style="border-radius: 6px; margin-top: 20px; margin-bottom: 20px; margin-left: auto; margin-right: auto"  />


<!-- raw HTML omitted -->
<h3 id="conclusion">Conclusion</h3>
<hr>
<!-- raw HTML omitted -->
<p>To  conclude, this analysis was done following a certification that i went through recently and it is called Practical Malware Analysis &amp; Triage. Even though, this is an old ransomware and many research has been peroformed onit. I still think that it was a great learning curve for me and I really enjoyed walking through the steps of the malware author and seeing how this ransomware worked.</p>
]]></content>
        </item>
        
    </channel>
</rss>
